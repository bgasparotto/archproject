package com.bgasparotto.archproject.persistence.dao;

import java.util.List;

import javax.persistence.EntityManager;

import com.bgasparotto.archproject.model.identity.LongIdentifiable;
import com.bgasparotto.archproject.persistence.exception.GeneralPersistenceException;

/**
 * <p>
 * A generic {@code DAO - Data Access Object} interface, containing {@code CRUD}
 * methods that may be used by all application entities declared on
 * {@link com.bgasparotto.archproject.model}.
 * </p>
 * <p>
 * All other DAO interfaces may want to extend this interface.
 * </p>
 * 
 * @author Bruno Gasparotto
 *
 * @param <T>
 *            The type of {@link com.bgasparotto.archproject.model} package
 *            whose the DAO is for
 */
public interface GenericDao<T extends LongIdentifiable> {
	
	/**
	 * Gets the JpaDao's {@code entityManager}.
	 *
	 * @return The JpaDao's {@code entityManager}
	 */
	EntityManager getEntityManager();

	/**
	 * Sets the JpaDao's {@code entityManager}.
	 *
	 * @param entityManager
	 *            The JpaDao's {@code entityManager} to set
	 */
	void setEntityManager(EntityManager entityManager);

	/**
	 * Find an entity by its {@code id}.
	 * 
	 * @param id
	 *            The {@code id} of the entity to find
	 * @return Entity corresponding to the given {@code id}, or {@code null} if
	 *         the given {@code id}:
	 *         <ul>
	 *         <li>Is {@code null}</li>
	 *         <li>Is {@code not null} and its long value is less than {@code 1}
	 *         </li>
	 *         <li>If there is no entity on database corresponding to the given
	 *         {@code id}</li>
	 *         </ul>
	 */
	T findById(Long id);

	/**
	 * Find all entities.
	 * 
	 * @return A {@code List} containing all entities of this type, or a empty
	 *         list if there is no entities on database
	 */
	List<T> findAll();

	/**
	 * Persist an entity on database.
	 * 
	 * @param type
	 *            Entity to be persisted
	 * @return The {@code id} value automatically generated by database on this
	 *         persistence operation
	 * @throws GeneralPersistenceException
	 *             If the persistence operation fails
	 */
	Long persist(T type) throws GeneralPersistenceException;

	/**
	 * Merge an entity on database.
	 * 
	 * @param type
	 *            Entity to be merged
	 * @return The merged entity reference obtained by this operation, which may
	 *         be different than the one passed as an argument to this method
	 * @throws GeneralPersistenceException
	 *             If the merge operation fails
	 */
	T merge(T type) throws GeneralPersistenceException;

	/**
	 * Delete an entity from database.
	 * 
	 * @param type
	 *            Entity to be deleted
	 * @throws GeneralPersistenceException
	 *             If this removal operation fails
	 */
	void delete(T type) throws GeneralPersistenceException;

	/**
	 * Delete an entity from database by its {@code id}.
	 * 
	 * @param id
	 *            {@code Id} of the entity to be deleted
	 * @throws GeneralPersistenceException
	 *             If this removal operation fails
	 */
	void delete(Long id) throws GeneralPersistenceException;
}
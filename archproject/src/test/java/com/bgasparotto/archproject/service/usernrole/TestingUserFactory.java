package com.bgasparotto.archproject.service.usernrole;

import java.time.LocalDateTime;
import java.util.UUID;

import com.bgasparotto.archproject.model.Authentication;
import com.bgasparotto.archproject.model.Credential;
import com.bgasparotto.archproject.model.Login;
import com.bgasparotto.archproject.model.Password;
import com.bgasparotto.archproject.model.Registration;
import com.bgasparotto.archproject.model.RolesGroup;
import com.bgasparotto.archproject.model.User;

/**
 * <p>
 * Abstract factory for model objects related to {@link User}. The objects
 * generated by this class' methods contain dummy values making them strict for
 * testing purposes.
 * </p>
 * 
 * @author Bruno Gasparotto
 *
 */
public abstract class TestingUserFactory {

	/* Prevents instantiation. */
	private TestingUserFactory() {
	}

	/**
	 * Gets an {@code Authentication} new instance.
	 * 
	 * @return The dummy {@code Authentication} instance
	 */
	public static Authentication newAuthenticationInstance() {
		Login login = new Login("someuser", "someuser@gmail.com");
		Password password = new Password("somepassword");
		Authentication authentication = new Authentication(login, password);

		return authentication;
	}

	/**
	 * Gets a {@code Credential} new instance.
	 * 
	 * @return The dummy {@code Credential} instance
	 */
	public static Credential newCredentialInstance() {
		Authentication authentication = newAuthenticationInstance();
		RolesGroup emptyRolesGroup = new RolesGroup();
		Credential credential = new Credential(authentication, emptyRolesGroup);

		return credential;
	}

	/**
	 * Gets a {@code Registration} new instance.
	 * 
	 * @return The dummy {@code Registration} instance
	 */
	public static Registration newRegistrationCredential() {
		String verificationCode = UUID.randomUUID().toString();
		LocalDateTime registrationDate = LocalDateTime.now();
		Registration registration = new Registration(registrationDate,
				verificationCode);

		return registration;
	}

	/**
	 * Gets an {@code User} new instance.
	 * 
	 * @return The dummy {@code User} instance
	 */
	public static User newUserInstance() {
		Credential credential = newCredentialInstance();
		Registration registration = newRegistrationCredential();
		User user = new User(1L, credential, registration);

		return user;
	}
}